{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { GlobalContext } from \"../../context/context\";\nexport default function Scanner() {\n  var _useContext = useContext(GlobalContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    state.allApprovedApplications.map(function (item, index) {\n      if (item.approvedObj.uid === data) {\n        console.log(data);\n        alert(\"Verified\", item.approvedObj.uid === data);\n      } else {\n        console.log(\"Not Verified\");\n      }\n    });\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, null, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, null, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject\n  }), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    }\n  }));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#fff'\n  },\n  barCodeView: {\n    width: '100%',\n    height: '50%',\n    marginBottom: 40\n  }\n});","map":{"version":3,"sources":["E:/SMIT WORK/React Native/ReactNativeDrawer/src/Screens/scanner/scanner.jsx"],"names":["React","useState","useEffect","useContext","BarCodeScanner","GlobalContext","Scanner","state","dispatch","hasPermission","setHasPermission","scanned","setScanned","requestPermissionsAsync","status","handleBarCodeScanned","type","data","allApprovedApplications","map","item","index","approvedObj","uid","console","log","alert","styles","container","undefined","StyleSheet","absoluteFillObject","create","flex","alignItems","justifyContent","backgroundColor","barCodeView","width","height","marginBottom"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;;;;;AAEA,SAASC,cAAT,QAA+B,sBAA/B;AACA,SAASC,aAAT;AAEA,eAAe,SAASC,OAAT,GAAmB;AAChC,oBAAyBH,UAAU,CAACE,aAAD,CAAnC;AAAA,MAAKE,KAAL,eAAKA,KAAL;AAAA,MAAaC,QAAb,eAAaA,QAAb;;AACA,kBAA0CP,QAAQ,CAAC,IAAD,CAAlD;AAAA;AAAA,MAAOQ,aAAP;AAAA,MAAsBC,gBAAtB;;AACA,mBAA8BT,QAAQ,CAAC,KAAD,CAAtC;AAAA;AAAA,MAAOU,OAAP;AAAA,MAAgBC,UAAhB;;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BE,cAAc,CAACS,uBAAf,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;AAECJ,cAAAA,gBAAgB,CAACI,MAAM,KAAK,SAAZ,CAAhB;;AAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAID,GALQ,EAKN,EALM,CAAT;;AASA,MAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAoB;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC/CL,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAL,IAAAA,KAAK,CAACW,uBAAN,CAA8BC,GAA9B,CAAkC,UAACC,IAAD,EAAMC,KAAN,EAAc;AAC5C,UAAGD,IAAI,CAACE,WAAL,CAAiBC,GAAjB,KAAyBN,IAA5B,EAAiC;AAC7BO,QAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;AACAS,QAAAA,KAAK,CAAC,UAAD,EAAcN,IAAI,CAACE,WAAL,CAAiBC,GAAjB,KAAyBN,IAAvC,CAAL;AACH,OAHD,MAGK;AACDO,QAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AACJ,KAPD;AAUD,GAZD;;AAcA,MAAIhB,aAAa,KAAK,IAAtB,EAA4B;AAC1B,WAAO,oBAAC,IAAD,2CAAP;AACD;;AACD,MAAIA,aAAa,KAAK,KAAtB,EAA6B;AAC3B,WAAO,oBAAC,IAAD,8BAAP;AACD;;AAED,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEkB,MAAM,CAACC;AAApB,KACE,oBAAC,cAAD;AACE,IAAA,gBAAgB,EAAEjB,OAAO,GAAGkB,SAAH,GAAed,oBAD1C;AAEE,IAAA,KAAK,EAAEe,UAAU,CAACC;AAFpB,IADF,EAKGpB,OAAO,IAAI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAE,mBAAf;AAAoC,IAAA,OAAO,EAAE;AAAA,aAAMC,UAAU,CAAC,KAAD,CAAhB;AAAA;AAA7C,IALd,CADF;AASD;AAED,IAAMe,MAAM,GAAGG,UAAU,CAACE,MAAX,CAAkB;AAC/BJ,EAAAA,SAAS,EAAE;AACTK,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,UAAU,EAAE,QAFH;AAGTC,IAAAA,cAAc,EAAE,QAHP;AAITC,IAAAA,eAAe,EAAE;AAJR,GADoB;AAO/BC,EAAAA,WAAW,EAAE;AACXC,IAAAA,KAAK,EAAE,MADI;AAEXC,IAAAA,MAAM,EAAE,KAFG;AAGXC,IAAAA,YAAY,EAAE;AAHH;AAPkB,CAAlB,CAAf","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { Text, View, StyleSheet, Button  } from 'react-native';\r\nimport { BarCodeScanner } from 'expo-barcode-scanner';\r\nimport { GlobalContext } from '../../context/context';\r\n\r\nexport default function Scanner() {\r\n  let {state , dispatch} = useContext(GlobalContext)\r\n  const [hasPermission, setHasPermission] = useState(null);\r\n  const [scanned, setScanned] = useState(false);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\r\n      setHasPermission(status === 'granted');\r\n    })();\r\n  }, []);\r\n\r\n\r\n\r\n  const handleBarCodeScanned = ({ type, data }) => {\r\n    setScanned(true);\r\n    state.allApprovedApplications.map((item,index)=>{\r\n        if(item.approvedObj.uid === data){\r\n            console.log(data)\r\n            alert(\"Verified\" , item.approvedObj.uid === data);\r\n        }else{\r\n            console.log(\"Not Verified\")\r\n        }\r\n    })\r\n    \r\n   \r\n  };\r\n\r\n  if (hasPermission === null) {\r\n    return <Text>Requesting for camera permission</Text>;\r\n  }\r\n  if (hasPermission === false) {\r\n    return <Text>No access to camera</Text>;\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <BarCodeScanner\r\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\r\n        style={StyleSheet.absoluteFillObject}\r\n      />\r\n      {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    backgroundColor: '#fff',\r\n  },\r\n  barCodeView: {\r\n    width: '100%', \r\n    height: '50%', \r\n    marginBottom: 40\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}