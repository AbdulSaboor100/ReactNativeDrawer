{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useContext, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport DateTimePicker from '@react-native-community/datetimepicker';\nimport { GlobalContext } from \"../../context/context\";\nimport { Fontisto } from '@expo/vector-icons';\nexport var DatePickerFunc = function DatePickerFunc() {\n  var _useContext = useContext(GlobalContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(new Date(1598051730000)),\n      _useState2 = _slicedToArray(_useState, 2),\n      date = _useState2[0],\n      setDate = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      reDate = _useState4[0],\n      setReDate = _useState4[1];\n\n  var _useState5 = useState('date'),\n      _useState6 = _slicedToArray(_useState5, 2),\n      mode = _useState6[0],\n      setMode = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      show = _useState8[0],\n      setShow = _useState8[1];\n\n  var onChange = function onChange(event, selectedDate) {\n    var currentDate = selectedDate || date;\n    setShow(Platform.OS === 'ios');\n    setDate(currentDate);\n    dispatch({\n      type: \"CURRENTDATEPICKER\",\n      payload: currentDate\n    });\n    setReDate(currentDate);\n  };\n\n  var showMode = function showMode(currentMode) {\n    setShow(true);\n    setMode(currentMode);\n  };\n\n  var showDatepicker = function showDatepicker() {\n    showMode('date');\n  };\n\n  var showTimepicker = function showTimepicker() {\n    showMode('time');\n  };\n\n  return React.createElement(View, null, React.createElement(View, {\n    style: {\n      width: 250,\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'flex-start',\n      borderColor: \"rgb(195, 195, 195)\",\n      borderWidth: 1,\n      height: 40,\n      paddingLeft: 5,\n      paddingTop: 5,\n      paddingBottom: 5\n    }\n  }, React.createElement(Fontisto, {\n    name: \"date\",\n    size: 20,\n    color: \"black\",\n    onPress: showDatepicker\n  }), reDate ? React.createElement(Text, {\n    style: {\n      fontSize: 15,\n      marginLeft: 10,\n      color: '#a9abaa'\n    }\n  }, date.toJSON().toString()) : React.createElement(Text, {\n    style: {\n      fontSize: 15,\n      marginLeft: 10,\n      color: '#a9abaa'\n    }\n  }, \"Date Of Birth\")), show && React.createElement(DateTimePicker, {\n    testID: \"dateTimePicker\",\n    value: date,\n    mode: mode,\n    is24Hour: true,\n    display: \"default\",\n    onChange: onChange\n  }));\n};","map":{"version":3,"sources":["E:/SMIT WORK/React Native/ReactNativeDrawer/src/components/date-picker/date-picker.jsx"],"names":["React","useContext","useState","DateTimePicker","GlobalContext","Fontisto","DatePickerFunc","state","dispatch","Date","date","setDate","reDate","setReDate","mode","setMode","show","setShow","onChange","event","selectedDate","currentDate","Platform","OS","type","payload","showMode","currentMode","showDatepicker","showTimepicker","width","display","flexDirection","alignItems","justifyContent","borderColor","borderWidth","height","paddingLeft","paddingTop","paddingBottom","fontSize","marginLeft","color","toJSON","toString"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;;;;;AAEA,OAAOC,cAAP,MAA2B,wCAA3B;AACA,SAASC,aAAT;AACA,SAASC,QAAT,QAAyB,oBAAzB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAClC,oBAAyBL,UAAU,CAACG,aAAD,CAAnC;AAAA,MAAKG,KAAL,eAAKA,KAAL;AAAA,MAAaC,QAAb,eAAaA,QAAb;;AACA,kBAAwBN,QAAQ,CAAC,IAAIO,IAAJ,CAAS,aAAT,CAAD,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAA6BT,QAAQ,EAArC;AAAA;AAAA,MAAOU,MAAP;AAAA,MAAgBC,SAAhB;;AACA,mBAAwBX,QAAQ,CAAC,MAAD,CAAhC;AAAA;AAAA,MAAOY,IAAP;AAAA,MAAaC,OAAb;;AACA,mBAAwBb,QAAQ,CAAC,KAAD,CAAhC;AAAA;AAAA,MAAOc,IAAP;AAAA,MAAaC,OAAb;;AAEA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,YAAR,EAAyB;AACxC,QAAMC,WAAW,GAAGD,YAAY,IAAIV,IAApC;AACAO,IAAAA,OAAO,CAACK,QAAQ,CAACC,EAAT,KAAgB,KAAjB,CAAP;AACAZ,IAAAA,OAAO,CAACU,WAAD,CAAP;AACAb,IAAAA,QAAQ,CAAC;AAACgB,MAAAA,IAAI,EAAG,mBAAR;AAA8BC,MAAAA,OAAO,EAAGJ;AAAxC,KAAD,CAAR;AACAR,IAAAA,SAAS,CAACQ,WAAD,CAAT;AACD,GAND;;AAQA,MAAMK,QAAQ,GAAG,SAAXA,QAAW,CAACC,WAAD,EAAiB;AAChCV,IAAAA,OAAO,CAAC,IAAD,CAAP;AACAF,IAAAA,OAAO,CAACY,WAAD,CAAP;AACD,GAHD;;AAKA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BF,IAAAA,QAAQ,CAAC,MAAD,CAAR;AACD,GAFD;;AAIA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BH,IAAAA,QAAQ,CAAC,MAAD,CAAR;AACD,GAFD;;AAIA,SACE,oBAAC,IAAD,QACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACI,MAAAA,KAAK,EAAC,GAAP;AAAWC,MAAAA,OAAO,EAAC,MAAnB;AAA2BC,MAAAA,aAAa,EAAC,KAAzC;AAAgDC,MAAAA,UAAU,EAAG,QAA7D;AAAwEC,MAAAA,cAAc,EAAG,YAAzF;AAAsGC,MAAAA,WAAW,EAAE,oBAAnH;AAA0IC,MAAAA,WAAW,EAAC,CAAtJ;AAAyJC,MAAAA,MAAM,EAAE,EAAjK;AAAqKC,MAAAA,WAAW,EAAC,CAAjL;AAAmLC,MAAAA,UAAU,EAAC,CAA9L;AAAgMC,MAAAA,aAAa,EAAC;AAA9M;AAAb,KACE,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAC,MAAf;AAAsB,IAAA,IAAI,EAAE,EAA5B;AAAgC,IAAA,KAAK,EAAC,OAAtC;AAA8C,IAAA,OAAO,EAAEZ;AAAvD,IADF,EAGIhB,MAAM,GACJ,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAC6B,MAAAA,QAAQ,EAAG,EAAZ;AAAiBC,MAAAA,UAAU,EAAE,EAA7B;AAAkCC,MAAAA,KAAK,EAAC;AAAxC;AAAb,KAAkEjC,IAAI,CAACkC,MAAL,GAAcC,QAAd,EAAlE,CADI,GAGJ,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACJ,MAAAA,QAAQ,EAAG,EAAZ;AAAiBC,MAAAA,UAAU,EAAE,EAA7B;AAAkCC,MAAAA,KAAK,EAAC;AAAxC;AAAb,qBANN,CADF,EAYG3B,IAAI,IACH,oBAAC,cAAD;AACE,IAAA,MAAM,EAAC,gBADT;AAEE,IAAA,KAAK,EAAEN,IAFT;AAGE,IAAA,IAAI,EAAEI,IAHR;AAIE,IAAA,QAAQ,EAAE,IAJZ;AAKE,IAAA,OAAO,EAAC,SALV;AAME,IAAA,QAAQ,EAAEI;AANZ,IAbJ,CADF;AAyBD,CArDM","sourcesContent":["import React, {useContext, useState} from 'react';\r\nimport {View, Button, Platform , Text} from 'react-native';\r\nimport DateTimePicker from '@react-native-community/datetimepicker';\r\nimport { GlobalContext } from '../../context/context';\r\nimport { Fontisto } from '@expo/vector-icons'; \r\n\r\nexport const DatePickerFunc = () => {\r\n  let {state , dispatch} = useContext(GlobalContext)\r\n  const [date, setDate] = useState(new Date(1598051730000));\r\n  const [reDate , setReDate] = useState()\r\n  const [mode, setMode] = useState('date');\r\n  const [show, setShow] = useState(false);\r\n\r\n  const onChange = (event, selectedDate) => {\r\n    const currentDate = selectedDate || date;\r\n    setShow(Platform.OS === 'ios');\r\n    setDate(currentDate);\r\n    dispatch({type : \"CURRENTDATEPICKER\" , payload : currentDate})\r\n    setReDate(currentDate)\r\n  };\r\n\r\n  const showMode = (currentMode) => {\r\n    setShow(true);\r\n    setMode(currentMode);\r\n  };\r\n\r\n  const showDatepicker = () => {\r\n    showMode('date');\r\n  };\r\n\r\n  const showTimepicker = () => {\r\n    showMode('time');\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <View style={{width:250,display:'flex', flexDirection:'row' ,alignItems : 'center' , justifyContent : 'flex-start',borderColor: \"rgb(195, 195, 195)\" , borderWidth:1, height :40, paddingLeft:5,paddingTop:5,paddingBottom:5 }}>\r\n        <Fontisto name=\"date\" size={20} color=\"black\" onPress={showDatepicker} />\r\n        {\r\n          reDate ? (\r\n            <Text style={{fontSize : 15 , marginLeft :10 , color:'#a9abaa'}}>{date.toJSON().toString()}</Text>\r\n          ) : (\r\n            <Text style={{fontSize : 15 , marginLeft :10 , color:'#a9abaa'}}>Date Of Birth</Text>\r\n          )\r\n        }\r\n      </View>\r\n      \r\n      {show && (\r\n        <DateTimePicker\r\n          testID=\"dateTimePicker\"\r\n          value={date}\r\n          mode={mode}\r\n          is24Hour={true}\r\n          display=\"default\"\r\n          onChange={onChange}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}