{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect, useContext } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { GlobalContext } from \"../../context/context\";\nimport { AntDesign } from '@expo/vector-icons';\nexport default function ImagePickerExample() {\n  var _useContext = useContext(GlobalContext),\n      state = _useContext.state,\n      dispatch = _useContext.dispatch;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var pickImage = function pickImage() {\n    var result;\n    return _regeneratorRuntime.async(function pickImage$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.All,\n              allowsEditing: true,\n              aspect: [4, 3],\n              quality: 1\n            }));\n\n          case 2:\n            result = _context.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n              dispatch({\n                type: \"APPLICANT_PHOTO\",\n                payload: result.uri\n              });\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(View, {\n    style: {\n      width: '100%',\n      display: 'flex',\n      flexDirection: 'row',\n      alignItems: 'center',\n      justifyContent: 'flex-start'\n    }\n  }, React.createElement(AntDesign, {\n    name: \"clouduploado\",\n    size: 25,\n    color: \"black\",\n    onPress: pickImage\n  }), image ? React.createElement(Text, {\n    style: {\n      fontSize: 15,\n      marginLeft: 10\n    }\n  }, \"Image Picked\") : React.createElement(Text, {\n    style: {\n      fontSize: 15,\n      marginLeft: 10\n    }\n  }, \"Upload Profile Pic\"));\n}","map":{"version":3,"sources":["E:/SMIT WORK/React Native/ReactNativeDrawer/src/components/image-picker/image-picker.jsx"],"names":["React","useState","useEffect","useContext","ImagePicker","GlobalContext","AntDesign","ImagePickerExample","state","dispatch","image","setImage","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","All","allowsEditing","aspect","quality","result","console","log","cancelled","uri","type","payload","width","display","flexDirection","alignItems","justifyContent","fontSize","marginLeft"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,UAArC,QAAuD,OAAvD;;;;;;AAEA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,SAASC,aAAT;AACA,SAASC,SAAT,QAA0B,oBAA1B;AAEA,eAAe,SAASC,kBAAT,GAA8B;AACzC,oBAAyBJ,UAAU,CAACE,aAAD,CAAnC;AAAA,MAAKG,KAAL,eAAKA,KAAL;AAAA,MAAaC,QAAb,eAAaA,QAAb;;AACF,kBAA0BR,QAAQ,CAAC,IAAD,CAAlC;AAAA;AAAA,MAAOS,KAAP;AAAA,MAAcC,QAAd;;AAEA,MAAMC,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEGR,WAAW,CAACS,uBAAZ,CAAoC;AACrDC,cAAAA,UAAU,EAAEV,WAAW,CAACW,gBAAZ,CAA6BC,GADY;AAErDC,cAAAA,aAAa,EAAE,IAFsC;AAGrDC,cAAAA,MAAM,EAAE,CAAC,CAAD,EAAI,CAAJ,CAH6C;AAIrDC,cAAAA,OAAO,EAAE;AAJ4C,aAApC,CAFH;;AAAA;AAEZC,YAAAA,MAFY;AAShBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AAEA,gBAAI,CAACA,MAAM,CAACG,SAAZ,EAAuB;AACrBZ,cAAAA,QAAQ,CAACS,MAAM,CAACI,GAAR,CAAR;AACAf,cAAAA,QAAQ,CAAC;AAACgB,gBAAAA,IAAI,EAAG,iBAAR;AAA4BC,gBAAAA,OAAO,EAAGN,MAAM,CAACI;AAA7C,eAAD,CAAR;AACD;;AAde;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAiBA,SACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACG,MAAAA,KAAK,EAAC,MAAP;AAAcC,MAAAA,OAAO,EAAC,MAAtB;AAA8BC,MAAAA,aAAa,EAAC,KAA5C;AAAmDC,MAAAA,UAAU,EAAG,QAAhE;AAA2EC,MAAAA,cAAc,EAAG;AAA5F;AAAb,KACE,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,cAAhB;AAA+B,IAAA,IAAI,EAAE,EAArC;AAA0C,IAAA,KAAK,EAAC,OAAhD;AAAwD,IAAA,OAAO,EAAEnB;AAAjE,IADF,EAKIF,KAAK,GACH,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACsB,MAAAA,QAAQ,EAAG,EAAZ;AAAiBC,MAAAA,UAAU,EAAE;AAA7B;AAAb,oBADG,GAGH,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAACD,MAAAA,QAAQ,EAAG,EAAZ;AAAiBC,MAAAA,UAAU,EAAE;AAA7B;AAAb,0BARN,CADF;AAcD","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\r\nimport { Button, Image, View, Platform ,Text } from 'react-native';\r\nimport * as ImagePicker from 'expo-image-picker';\r\nimport { GlobalContext } from '../../context/context';\r\nimport { AntDesign } from '@expo/vector-icons'; \r\n\r\nexport default function ImagePickerExample() {\r\n    let {state , dispatch} = useContext(GlobalContext);\r\n  const [image, setImage] = useState(null);\r\n\r\n  const pickImage = async () => {\r\n    // No permissions request is necessary for launching the image library\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.All,\r\n      allowsEditing: true,\r\n      aspect: [4, 3],\r\n      quality: 1,\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    if (!result.cancelled) {\r\n      setImage(result.uri);\r\n      dispatch({type : \"APPLICANT_PHOTO\" , payload : result.uri})\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={{width:'100%',display:'flex', flexDirection:'row' ,alignItems : 'center' , justifyContent : 'flex-start' }}>\r\n      <AntDesign name=\"clouduploado\" size={25}  color=\"black\" onPress={pickImage} > \r\n      \r\n      </AntDesign>\r\n      {\r\n        image ? (\r\n          <Text style={{fontSize : 15 , marginLeft :10}}>Image Picked</Text>\r\n        ) : (\r\n          <Text style={{fontSize : 15 , marginLeft :10}}>Upload Profile Pic</Text>\r\n        )\r\n      }\r\n    </View>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}